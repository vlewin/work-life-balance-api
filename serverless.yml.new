service: work-life-balance-api
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: developement
  region: eu-central-1
  cfLogs: true
  memorySize: 128
  timeout: 5

  # usagePlan:
  #   quota:
  #     limit: 5000
  #     offset: 2
  #     period: MONTH
  #   throttle:
  #     burstLimit: 200
  #     rateLimit: 100

  environment:
    RECORDS_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"

plugins:
  - serverless-offline

package:
  excludeDevDependencies: true
  include:
   - api/**
  exclude:
    - .*
    - package.json
    - package-lock.json
    - yarn.lock
    - README.md
    - node_modules/.bin/**
    - playground/**
  # exclude:
  #  - .git/**
  #  - node_modules/**

functions:
  authorizer:
    handler: protected.handler
    events:
      - http:
          path: protected
          method: get
          parameters:
            querystrings:
              url: true
            headers:
              foo: false
            paths:
              bar: false

  hello:
    handler: api/records/read.handler
    events:
      - http:
          path: records
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              querystrings:
                foo: true
              paths:
                bar: true
            template:
              text/xhtml: '{ "stage" : "$context.stage" }'
              application/json: '{ "httpMethod" : "$context.httpMethod" }'

          response:
            headers:
              Content-Type: integration.response.header.Content-Type
              Cache-Control: "'max-age=120'"

  # create:
  #   handler: api/create.handler
  #   description: Submit time record information.
  #   events:
  #     - http:
  #         path: records
  #         method: post


resources:
  Resources:
    RecordsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'records'
